/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { HttpRequest, HttpHeaders, HttpParams } from '@angular/common/http';
import { assign } from 'core-js/fn/object';
export class RestangularHelper {
    /**
     * @param {?} options
     * @return {?}
     */
    static createRequest(options) {
        /** @type {?} */
        const requestQueryParams = RestangularHelper.createRequestQueryParams(options.params);
        /** @type {?} */
        const requestHeaders = RestangularHelper.createRequestHeaders(options.headers);
        /** @type {?} */
        const methodName = options.method.toUpperCase();
        /** @type {?} */
        const withCredentials = options.withCredentials || false;
        /** @type {?} */
        let request = new HttpRequest(methodName, options.url, options.data, {
            headers: requestHeaders,
            params: requestQueryParams,
            responseType: options.responseType,
            withCredentials
        });
        if (['GET', 'DELETE', 'HEAD', 'JSONP', 'OPTIONS'].indexOf(methodName) >= 0) {
            request = new HttpRequest(methodName, options.url, {
                headers: requestHeaders,
                params: requestQueryParams,
                responseType: options.responseType,
                withCredentials
            });
        }
        return request;
    }
    /**
     * @param {?} queryParams
     * @return {?}
     */
    static createRequestQueryParams(queryParams) {
        /** @type {?} */
        const requestQueryParams = assign({}, queryParams);
        /** @type {?} */
        let search = new HttpParams();
        for (const key in requestQueryParams) {
            /** @type {?} */
            let value = requestQueryParams[key];
            if (Array.isArray(value)) {
                value.forEach(function (val) {
                    search = search.append(key, val);
                });
            }
            else {
                if (typeof value === 'object') {
                    value = JSON.stringify(value);
                }
                search = search.append(key, value);
            }
        }
        return search;
    }
    /**
     * @param {?} headers
     * @return {?}
     */
    static createRequestHeaders(headers) {
        for (const key in headers) {
            /** @type {?} */
            const value = headers[key];
            if (typeof value === 'undefined') {
                delete headers[key];
            }
        }
        return new HttpHeaders(assign({}, headers));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXJlc3Rhbmd1bGFyLWhlbHBlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1yZXN0YW5ndWxhci8iLCJzb3VyY2VzIjpbImxpYi9uZ3gtcmVzdGFuZ3VsYXItaGVscGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxVQUFVLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUU1RSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFFM0MsTUFBTSxPQUFPLGlCQUFpQjs7Ozs7SUFFNUIsTUFBTSxDQUFDLGFBQWEsQ0FBQyxPQUFPOztjQUNwQixrQkFBa0IsR0FBRyxpQkFBaUIsQ0FBQyx3QkFBd0IsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDOztjQUMvRSxjQUFjLEdBQUcsaUJBQWlCLENBQUMsb0JBQW9CLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQzs7Y0FDeEUsVUFBVSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFOztjQUN6QyxlQUFlLEdBQUcsT0FBTyxDQUFDLGVBQWUsSUFBSSxLQUFLOztZQUVwRCxPQUFPLEdBQUcsSUFBSSxXQUFXLENBQzNCLFVBQVUsRUFDVixPQUFPLENBQUMsR0FBRyxFQUNYLE9BQU8sQ0FBQyxJQUFJLEVBQ1o7WUFDRSxPQUFPLEVBQUUsY0FBYztZQUN2QixNQUFNLEVBQUUsa0JBQWtCO1lBQzFCLFlBQVksRUFBRSxPQUFPLENBQUMsWUFBWTtZQUNsQyxlQUFlO1NBQ2hCLENBQ0Y7UUFFRCxJQUFJLENBQUMsS0FBSyxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLFNBQVMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDMUUsT0FBTyxHQUFHLElBQUksV0FBVyxDQUN2QixVQUFVLEVBQ1YsT0FBTyxDQUFDLEdBQUcsRUFDWDtnQkFDRSxPQUFPLEVBQUUsY0FBYztnQkFDdkIsTUFBTSxFQUFFLGtCQUFrQjtnQkFDMUIsWUFBWSxFQUFFLE9BQU8sQ0FBQyxZQUFZO2dCQUNsQyxlQUFlO2FBQ2hCLENBQ0YsQ0FBQztTQUNIO1FBQ0QsT0FBTyxPQUFPLENBQUM7SUFDakIsQ0FBQzs7Ozs7SUFFRCxNQUFNLENBQUMsd0JBQXdCLENBQUMsV0FBVzs7Y0FDbkMsa0JBQWtCLEdBQUcsTUFBTSxDQUFDLEVBQUUsRUFBRSxXQUFXLENBQUM7O1lBQzlDLE1BQU0sR0FBZSxJQUFJLFVBQVUsRUFBRTtRQUV6QyxLQUFLLE1BQU0sR0FBRyxJQUFJLGtCQUFrQixFQUFFOztnQkFDaEMsS0FBSyxHQUFRLGtCQUFrQixDQUFDLEdBQUcsQ0FBQztZQUV4QyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQ3hCLEtBQUssQ0FBQyxPQUFPLENBQUMsVUFBVSxHQUFHO29CQUN6QixNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7Z0JBQ25DLENBQUMsQ0FBQyxDQUFDO2FBQ0o7aUJBQU07Z0JBQ0wsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLEVBQUU7b0JBQzdCLEtBQUssR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO2lCQUMvQjtnQkFDRCxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7YUFDcEM7U0FDRjtRQUVELE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7Ozs7O0lBRUQsTUFBTSxDQUFDLG9CQUFvQixDQUFDLE9BQU87UUFDakMsS0FBSyxNQUFNLEdBQUcsSUFBSSxPQUFPLEVBQUU7O2tCQUNuQixLQUFLLEdBQVEsT0FBTyxDQUFDLEdBQUcsQ0FBQztZQUMvQixJQUFJLE9BQU8sS0FBSyxLQUFLLFdBQVcsRUFBRTtnQkFDaEMsT0FBTyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDckI7U0FDRjtRQUVELE9BQU8sSUFBSSxXQUFXLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQzlDLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBSZXF1ZXN0LCBIdHRwSGVhZGVycywgSHR0cFBhcmFtcyB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcblxuaW1wb3J0IHsgYXNzaWduIH0gZnJvbSAnY29yZS1qcy9mbi9vYmplY3QnO1xuXG5leHBvcnQgY2xhc3MgUmVzdGFuZ3VsYXJIZWxwZXIge1xuXG4gIHN0YXRpYyBjcmVhdGVSZXF1ZXN0KG9wdGlvbnMpIHtcbiAgICBjb25zdCByZXF1ZXN0UXVlcnlQYXJhbXMgPSBSZXN0YW5ndWxhckhlbHBlci5jcmVhdGVSZXF1ZXN0UXVlcnlQYXJhbXMob3B0aW9ucy5wYXJhbXMpO1xuICAgIGNvbnN0IHJlcXVlc3RIZWFkZXJzID0gUmVzdGFuZ3VsYXJIZWxwZXIuY3JlYXRlUmVxdWVzdEhlYWRlcnMob3B0aW9ucy5oZWFkZXJzKTtcbiAgICBjb25zdCBtZXRob2ROYW1lID0gb3B0aW9ucy5tZXRob2QudG9VcHBlckNhc2UoKTtcbiAgICBjb25zdCB3aXRoQ3JlZGVudGlhbHMgPSBvcHRpb25zLndpdGhDcmVkZW50aWFscyB8fCBmYWxzZTtcblxuICAgIGxldCByZXF1ZXN0ID0gbmV3IEh0dHBSZXF1ZXN0KFxuICAgICAgbWV0aG9kTmFtZSxcbiAgICAgIG9wdGlvbnMudXJsLFxuICAgICAgb3B0aW9ucy5kYXRhLFxuICAgICAge1xuICAgICAgICBoZWFkZXJzOiByZXF1ZXN0SGVhZGVycyxcbiAgICAgICAgcGFyYW1zOiByZXF1ZXN0UXVlcnlQYXJhbXMsXG4gICAgICAgIHJlc3BvbnNlVHlwZTogb3B0aW9ucy5yZXNwb25zZVR5cGUsXG4gICAgICAgIHdpdGhDcmVkZW50aWFsc1xuICAgICAgfVxuICAgICk7XG5cbiAgICBpZiAoWydHRVQnLCAnREVMRVRFJywgJ0hFQUQnLCAnSlNPTlAnLCAnT1BUSU9OUyddLmluZGV4T2YobWV0aG9kTmFtZSkgPj0gMCkge1xuICAgICAgcmVxdWVzdCA9IG5ldyBIdHRwUmVxdWVzdChcbiAgICAgICAgbWV0aG9kTmFtZSxcbiAgICAgICAgb3B0aW9ucy51cmwsXG4gICAgICAgIHtcbiAgICAgICAgICBoZWFkZXJzOiByZXF1ZXN0SGVhZGVycyxcbiAgICAgICAgICBwYXJhbXM6IHJlcXVlc3RRdWVyeVBhcmFtcyxcbiAgICAgICAgICByZXNwb25zZVR5cGU6IG9wdGlvbnMucmVzcG9uc2VUeXBlLFxuICAgICAgICAgIHdpdGhDcmVkZW50aWFsc1xuICAgICAgICB9XG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gcmVxdWVzdDtcbiAgfVxuXG4gIHN0YXRpYyBjcmVhdGVSZXF1ZXN0UXVlcnlQYXJhbXMocXVlcnlQYXJhbXMpIHtcbiAgICBjb25zdCByZXF1ZXN0UXVlcnlQYXJhbXMgPSBhc3NpZ24oe30sIHF1ZXJ5UGFyYW1zKTtcbiAgICBsZXQgc2VhcmNoOiBIdHRwUGFyYW1zID0gbmV3IEh0dHBQYXJhbXMoKTtcblxuICAgIGZvciAoY29uc3Qga2V5IGluIHJlcXVlc3RRdWVyeVBhcmFtcykge1xuICAgICAgbGV0IHZhbHVlOiBhbnkgPSByZXF1ZXN0UXVlcnlQYXJhbXNba2V5XTtcblxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHZhbHVlLmZvckVhY2goZnVuY3Rpb24gKHZhbCkge1xuICAgICAgICAgIHNlYXJjaCA9IHNlYXJjaC5hcHBlbmQoa2V5LCB2YWwpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgdmFsdWUgPSBKU09OLnN0cmluZ2lmeSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgc2VhcmNoID0gc2VhcmNoLmFwcGVuZChrZXksIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc2VhcmNoO1xuICB9XG5cbiAgc3RhdGljIGNyZWF0ZVJlcXVlc3RIZWFkZXJzKGhlYWRlcnMpIHtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBoZWFkZXJzKSB7XG4gICAgICBjb25zdCB2YWx1ZTogYW55ID0gaGVhZGVyc1trZXldO1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgZGVsZXRlIGhlYWRlcnNba2V5XTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IEh0dHBIZWFkZXJzKGFzc2lnbih7fSwgaGVhZGVycykpO1xuICB9XG59XG4iXX0=