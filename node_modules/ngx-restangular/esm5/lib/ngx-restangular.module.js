/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { NgModule, Optional, SkipSelf, InjectionToken } from '@angular/core';
import { HttpClientModule } from '@angular/common/http';
import { RESTANGULAR, RestangularFactory } from './ngx-restangular.config';
import { Restangular } from './ngx-restangular';
import { RestangularHttp } from './ngx-restangular-http';
/** @type {?} */
export var CONFIG_OBJ = new InjectionToken('configObj');
var RestangularModule = /** @class */ (function () {
    function RestangularModule(parentModule) {
        if (parentModule) {
            throw new Error('RestangularModule is already loaded. Import it in the AppModule only');
        }
    }
    /**
     * @param {?=} config1
     * @param {?=} config2
     * @return {?}
     */
    RestangularModule.forRoot = /**
     * @param {?=} config1
     * @param {?=} config2
     * @return {?}
     */
    function (config1, config2) {
        return {
            ngModule: RestangularModule,
            providers: [
                { provide: CONFIG_OBJ, useValue: [config1, config2] },
                { provide: RESTANGULAR, useFactory: RestangularFactory, deps: [CONFIG_OBJ] },
            ]
        };
    };
    RestangularModule.decorators = [
        { type: NgModule, args: [{
                    imports: [HttpClientModule],
                    providers: [RestangularHttp, Restangular]
                },] },
    ];
    /** @nocollapse */
    RestangularModule.ctorParameters = function () { return [
        { type: RestangularModule, decorators: [{ type: Optional }, { type: SkipSelf }] }
    ]; };
    return RestangularModule;
}());
export { RestangularModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXJlc3Rhbmd1bGFyLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1yZXN0YW5ndWxhci8iLCJzb3VyY2VzIjpbImxpYi9uZ3gtcmVzdGFuZ3VsYXIubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQXVCLFFBQVEsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLGNBQWMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNsRyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUN4RCxPQUFPLEVBQUUsV0FBVyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDM0UsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQzs7QUFFekQsTUFBTSxLQUFPLFVBQVUsR0FBRyxJQUFJLGNBQWMsQ0FBUyxXQUFXLENBQUM7QUFFakU7SUFNRSwyQkFBb0MsWUFBK0I7UUFDakUsSUFBSSxZQUFZLEVBQUU7WUFDaEIsTUFBTSxJQUFJLEtBQUssQ0FDYixzRUFBc0UsQ0FBQyxDQUFDO1NBQzNFO0lBQ0gsQ0FBQzs7Ozs7O0lBSU0seUJBQU87Ozs7O0lBQWQsVUFBZSxPQUFRLEVBQUUsT0FBUTtRQUMvQixPQUFPO1lBQ0wsUUFBUSxFQUFFLGlCQUFpQjtZQUMzQixTQUFTLEVBQUU7Z0JBQ1QsRUFBQyxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsRUFBQztnQkFDbkQsRUFBQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFVBQVUsRUFBRSxrQkFBa0IsRUFBRSxJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUMsRUFBQzthQUMzRTtTQUNGLENBQUM7SUFDSixDQUFDOztnQkF2QkYsUUFBUSxTQUFDO29CQUNSLE9BQU8sRUFBRSxDQUFDLGdCQUFnQixDQUFDO29CQUMzQixTQUFTLEVBQUUsQ0FBQyxlQUFlLEVBQUUsV0FBVyxDQUFDO2lCQUMxQzs7OztnQkFHbUQsaUJBQWlCLHVCQUF0RCxRQUFRLFlBQUksUUFBUTs7SUFtQm5DLHdCQUFDO0NBQUEsQUF6QkQsSUF5QkM7U0FyQlksaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTW9kdWxlV2l0aFByb3ZpZGVycywgTmdNb2R1bGUsIE9wdGlvbmFsLCBTa2lwU2VsZiwgSW5qZWN0aW9uVG9rZW4gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEh0dHBDbGllbnRNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBSRVNUQU5HVUxBUiwgUmVzdGFuZ3VsYXJGYWN0b3J5IH0gZnJvbSAnLi9uZ3gtcmVzdGFuZ3VsYXIuY29uZmlnJztcbmltcG9ydCB7IFJlc3Rhbmd1bGFyIH0gZnJvbSAnLi9uZ3gtcmVzdGFuZ3VsYXInO1xuaW1wb3J0IHsgUmVzdGFuZ3VsYXJIdHRwIH0gZnJvbSAnLi9uZ3gtcmVzdGFuZ3VsYXItaHR0cCc7XG5cbmV4cG9ydCBjb25zdCBDT05GSUdfT0JKID0gbmV3IEluamVjdGlvblRva2VuPHN0cmluZz4oJ2NvbmZpZ09iaicpO1xuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiBbSHR0cENsaWVudE1vZHVsZV0sXG4gIHByb3ZpZGVyczogW1Jlc3Rhbmd1bGFySHR0cCwgUmVzdGFuZ3VsYXJdXG59KVxuZXhwb3J0IGNsYXNzIFJlc3Rhbmd1bGFyTW9kdWxlIHtcblxuICBjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKSBAU2tpcFNlbGYoKSBwYXJlbnRNb2R1bGU6IFJlc3Rhbmd1bGFyTW9kdWxlKSB7XG4gICAgaWYgKHBhcmVudE1vZHVsZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnUmVzdGFuZ3VsYXJNb2R1bGUgaXMgYWxyZWFkeSBsb2FkZWQuIEltcG9ydCBpdCBpbiB0aGUgQXBwTW9kdWxlIG9ubHknKTtcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgZm9yUm9vdChjb25maWdGdW5jdGlvbj86IChwcm92aWRlcjogYW55LCAuLi5hcmc6IGFueVtdKSA9PiB2b2lkKTogTW9kdWxlV2l0aFByb3ZpZGVycztcbiAgc3RhdGljIGZvclJvb3QocHJvdmlkZXJzPzogYW55W10sIGNvbmZpZ0Z1bmN0aW9uPzogKHByb3ZpZGVyOiBhbnksIC4uLmFyZzogYW55W10pID0+IHZvaWQpOiBNb2R1bGVXaXRoUHJvdmlkZXJzO1xuICBzdGF0aWMgZm9yUm9vdChjb25maWcxPywgY29uZmlnMj8pOiBNb2R1bGVXaXRoUHJvdmlkZXJzIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmdNb2R1bGU6IFJlc3Rhbmd1bGFyTW9kdWxlLFxuICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIHtwcm92aWRlOiBDT05GSUdfT0JKLCB1c2VWYWx1ZTogW2NvbmZpZzEsIGNvbmZpZzJdfSxcbiAgICAgICAge3Byb3ZpZGU6IFJFU1RBTkdVTEFSLCB1c2VGYWN0b3J5OiBSZXN0YW5ndWxhckZhY3RvcnksIGRlcHM6IFtDT05GSUdfT0JKXX0sXG4gICAgICBdXG4gICAgfTtcbiAgfVxuXG59XG4iXX0=